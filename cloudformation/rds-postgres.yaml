AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: 'RDS CF Deployment'

Parameters:
  DBName:
    Default: tradingbotDB
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'false'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro
    AllowedValues: [db.t3.micro, db.m5.large, db.m5.xlarge, db.m5.2xlarge,]
    ConstraintDescription: must select a valid database instance type.
  SecurityGroup:
    Description: The security group that contains instances that need access to
      the database
    Default: default
    Type: String
    AllowedPattern: '[a-zA-Z0-9\-]+'
    ConstraintDescription: must be a valid security group name.
  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.

Conditions:
  Is-EC2-VPC: !Or [!Equals [!Ref 'AWS::Region', eu-central-1], !Equals [!Ref 'AWS::Region',
      cn-north-1]]
  Is-EC2-Classic: !Not [{Condition: Is-EC2-VPC}]

Resources:
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: Is-EC2-VPC
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupName: !Ref 'SecurityGroup'

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Condition: Is-EC2-Classic
    Properties:
      DBSecurityGroupIngress:
        EC2SecurityGroupName: !Ref 'SecurityGroup'
      GroupDescription: database access

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: postgres
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: !Ref 'MultiAZ'
      Tags:
      - Key: Name
        Value: Master Database
      VPCSecurityGroups: !If [Is-EC2-VPC, [!GetAtt [DBEC2SecurityGroup, GroupId]],
        !Ref 'AWS::NoValue']
      DBSecurityGroups: !If [Is-EC2-Classic, [!Ref 'DBSecurityGroup'], !Ref 'AWS::NoValue']
    DeletionPolicy: Snapshot

Outputs:
  EC2Platform:
    Description: Platform in which this stack is deployed
    Value: !If [Is-EC2-VPC, EC2-VPC, EC2-Classic]
  JDBCConnectionString:
    Description: JDBC connection string for the master database
    Value: !Join ['', ['jdbc:postgresql://', !GetAtt [PostgresDB, Endpoint.Address], ':',
        !GetAtt [PostgresDB, Endpoint.Port], /, !Ref 'DBName']]
